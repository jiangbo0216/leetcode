fn main() {
    let lst = vec![1, 2, 3, 1, 2, 4, 5, 1, 2];
    let total: i32 = lst.iter().sum();
    println!("{}", total); // 输出 21
}

/*
在上面的代码中，我们首先定义了一个包含整数的向量 lst，并将其传递给 iter() 方法来创建一个迭代器。然后，我们使用迭代器的 sum() 方法来计算所有元素的总和。由于 sum() 方法返回一个泛型类型的值，因此我们需要在变量名后面加上类型注解 : i32 来指定变量的类型。最后，我们使用 println!() 宏来输出求和结果。

需要注意的是，Rust 中的迭代器是惰性的，因此在调用 sum() 方法前，必须先调用 iter() 方法来创建迭代器。
 */
