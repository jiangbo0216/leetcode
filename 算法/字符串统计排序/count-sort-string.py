'''
输入一下字符串测试
My sister is in the house not in the yard
'''
vec=input().split()
arr=[]
for i in vec:
    l=list(i)
    l.sort()
    tmp="".join(l)
    arr.append(tmp)
map={}
hi=0
for i in arr:
    if i not in map:
        map[i]=0
    map[i]+=1
    hi=max(hi,map[i])
for i in range(hi,0,-1):
    mat=[]
    for k in map:
        if map[k]==i:
            mat.append(k)
    mat=sorted(mat, key=lambda x:(len(x),x))
    for w in mat:
        for j in range(i):
            print(w+" ",end="")


"""
这段代码实现了对输入的字符串进行排序，并按照字母出现的频率从高到低输出排列结果。

首先，程序通过 `input()` 函数获取输入的字符串，并使用 `split()` 方法将其拆分成一个列表 `vec`，每个元素表示一个字符串。然后，对于每个字符串，程序将其转换为一个由字母组成的列表 `l`，并使用 `sort()` 方法按照字母顺序对其进行排序，然后将排序后的字母列表重新组合成一个字符串 `tmp`，并将其添加到列表 `arr` 中。

接下来，程序创建一个空字典 `map`，用于保存每个字符串出现的次数。程序遍历列表 `arr` 中的每个字符串，并将其添加到字典 `map` 中。如果该字符串已经在字典中，则将其出现次数加1，否则将其添加到字典中，并将其出现次数设置为1。程序还维护一个变量 `hi`，表示出现次数最高的字符串出现的次数。

然后，程序从出现次数最高的字符串开始，从高到低遍历所有可能的出现次数。对于每个出现次数，程序将所有出现次数等于该值的字符串放入一个列表 `mat` 中，并按照字符串长度和字典序对其进行排序。最后，程序遍历排序后的列表 `mat`，输出每个字符串的出现次数次该字符串。具体地，程序使用嵌套的循环，外层循环遍历出现次数，内层循环遍历字符串，输出字符串及其出现次数。注意，为了避免在输出字符串后自动换行，程序使用 `end=""` 将输出末尾的换行符替换为空格。

总之，该程序实现了对一组字符串进行排序和计数，并按照一定的规则输出排序结果。
"""